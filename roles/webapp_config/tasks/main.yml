---

    # https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04
    - name: cfg | drop .env file
      become_user: "{{ service_user }}"
      template:
        src: webapp_dotenv.j2
        dest: "{{ service_dotenv_path }}"
        owner: "{{ service_user }}"
        group: "{{ service_group }}"
        mode: 0744

    # can only run this after env is configured!
    - name: migration | apply migrations
      become_user: "{{ service_user }}"
      environment:
        CATCHPY_DOTENV_PATH: "{{ service_dotenv_path }}"
      django_manage:
        command: migrate
        app_path: "{{ service_install_dir }}"
        virtualenv: "{{ service_venv_dir }}"

    - name: admin user | create admin user
      become_user: "{{ service_user }}"
      environment:
        CATCHPY_DOTENV_PATH: "{{ service_dotenv_path }}"
        CATCHPY_ADMIN_USER: "{{ service_admin_user }}"
        CATCHPY_ADMIN_EMAIL: "{{ service_admin_user }}@catchpy.org"
        CATCHPY_ADMIN_PASSWORD: "{{ service_admin_password }}"
      shell: ". {{ service_venv_dir }}/bin/activate && python ./create_super_user.py"
      args:
        chdir: "{{ service_install_dir }}"
      tags:
        - run_now

    - name: collectstatic | run collectstatic
      become_user: "{{ service_user }}"
      environment:
        CATCHPY_DOTENV_PATH: "{{ service_dotenv_path }}"
      django_manage:
        command: collectstatic
        app_path: "{{ service_install_dir }}"
        virtualenv: "{{ service_venv_dir }}"
      notify: restart webapp

    - name: pip packages | install gunicorn
      become_user: "{{ service_user }}"
      pip:
        virtualenv: "{{ service_venv_dir }}"
        chdir: "{{ service_install_dir }}"
        name: gunicorn
        state: present

    - name: gunicorn | create gunicorn config
      become_user: "{{ service_user }}"
      template:
        src: gunicorn_start.j2
        dest: "{{ service_venv_dir }}/bin/gunicorn_start"
        owner: "{{ service_user }}"
        group: "{{ service_group }}"
        mode: 0755
        backup: yes

    - name: logs | create log folder
      become_user: "{{ service_user }}"
      file:
        path: "{{ service_log_dir }}"
        owner: "{{ service_user }}"
        group: "{{ service_group }}"
        mode: 0774
        state: directory

    - name: supervisor | ensure supervisor is running
      service:
        name: supervisor
        state: started
        enabled: yes

    - name: supervisor | create supervisor config
      template:
        src: supervisor_config.j2
        dest: /etc/supervisor/conf.d/{{ service_name }}.conf
        backup: yes

    - name: supervisor | reload supervisor config for {{ service_name }}
      supervisorctl:
        name: "{{ service_name }}"
        state: present

      #- name: log | drop logrotate conf
      #template:
      #  src: logrotate.j2
      #  dest: "/etc/logrotate.d/{{ service_name }}"
      #  mode: 0644
      #tags:
      #  - drop_app_logrotate


